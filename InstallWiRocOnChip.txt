To flash image

Run this on Ubuntu before running the chrome flash tool:
sudo usermod -a -G dialout $USER
sudo usermod -a -G plugdev $USER

# Create udev rules 
echo -e 'SUBSYSTEM=="usb", ATTRS{idVendor}=="1f3a", ATTRS{idProduct}=="efe8", GROUP="plugdev", MODE="0660" SYMLINK+="usb-chip"
SUBSYSTEM=="usb", ATTRS{idVendor}=="18d1", ATTRS{idProduct}=="1010", GROUP="plugdev", MODE="0660" SYMLINK+="usb-chip-fastboot"
SUBSYSTEM=="usb", ATTRS{idVendor}=="1f3a", ATTRS{idProduct}=="1010", GROUP="plugdev", MODE="0660" SYMLINK+="usb-chip-fastboot"
SUBSYSTEM=="usb", ATTRS{idVendor}=="067b", ATTRS{idProduct}=="2303", GROUP="plugdev", MODE="0660" SYMLINK+="usb-serial-adapter"
' | sudo tee /etc/udev/rules.d/99-allwinner.rules
sudo udevadm control --reload-rules

http://flash.getchip.com/


------------------------
screen /dev/ttyACM0

cd /home/chip
#sudo systemctl disable networkmanager.service
sudo nmcli device wifi connect 'WiRoc' password 'WiRocWiRoc' ifname wlan0
wget -O /home/chip/install.sh https://raw.githubusercontent.com/henla464/WiRoc-Python-2/master/install.sh
chmod u+x install.sh
------------------------
Install WiRoc on C.H.I.P

Update package list:
	sudo apt-get update

Install sqlite3
	sudo apt-get install libsqlite3-dev

Install python/pip
	a) sudo apt-get install python3
        b) //dont know if this is necessary// sudo apt-get install python3-setuptools python3-dev build-essential 
        c) sudo apt-get install python3-pip

Install flask
	a) sudo pip3 install flask

Install serial
	a) sudo pip3 install pyserial

Install jsonpickle
	a) sudo pip3 install jsonpickle

Install pyudev
	a) sudo pip3 install pyudev

Install newer nodejs
	a) wget https://nodejs.org/dist/v6.9.1/node-v6.9.1-linux-armv7l.tar.xz
	b) sudo tar -C /usr/local --strip-components 1 -xJf node-v6.9.1-linux-armv7l.tar.xz
	c) sudo ln -s /usr/local/bin/node /usr/bin/nodejs
	d) sudo ln -s /usr/local/bin/npm /usr/bin/npm

ON Ubuntu: Copy over WiRoc-Python-2
	a) scp -r WiRoc-Python-2 chip@chip.local:/home/chip

ON Ubuntu: Copy over WiRoc-BLE-Device
	a) scp -r WiRoc-BLE-Device chip@chip.local:/home/chip

Install python 2
	a) sudo apt-get install python

Install bleno
	a) sudo apt-get install bluetooth bluez libbluetooth-dev libudev-dev
	c) cd /home/chip/WiRoc-BLE-Device/
	b) npm install bleno

Startup scripts:
	cd /home/chip
	mkdir WiRoc-StartupScripts
	cd WiRoc-StartupScripts
	wget -O /home/chip/WiRoc-StartupScripts/Startup.sh https://raw.githubusercontent.com/henla464/WiRoc-StartupScripts/master/Startup.sh
	sudo chmod +x /home/chip/WiRoc-StartupScripts/Startup.sh
	wget -O /home/chip/WiRoc-StartupScripts/setGPIOuart2 https://raw.githubusercontent.com/henla464/WiRoc-StartupScripts/master/setGPIOuart2
	sudo chmod +x /home/chip/WiRoc-StartupScripts/setGPIOuart2
	sudo wget -O /etc/systemd/system/WiRocPython.service https://raw.githubusercontent.com/henla464/WiRoc-StartupScripts/master/WiRocPython.service
	sudo wget -O /etc/systemd/system/WiRocBLE.service https://raw.githubusercontent.com/henla464/WiRoc-StartupScripts/master/WiRocBLE.service
	sudo wget -O /etc/systemd/system/WiRocStartup.service https://raw.githubusercontent.com/henla464/WiRoc-StartupScripts/master/WiRocStartup.service
	sudo systemctl enable /etc/systemd/system/WiRocStartup.service
	sudo systemctl enable /etc/systemd/system/WiRocBLE.service
	sudo systemctl enable /etc/systemd/system/WiRocPython.service



#Disable bluetoothd
#	a) once: sudo systemctl stop bluetooth (or permanently sudo systemctl disable bluetooth)
#	b) power up bt adapter: sudo hciconfig hci0 up


Install the new dtb on chip
	rm /boot/sun5i-r8-chip.dtb
	wget -O /boot https://raw.githubusercontent.com/henla464/WiRoc-StartupScripts/master/sun5i-r8-chip.dtb
	
#c) cp /home/chip/WiRoc-StartupScripts/sun5i-r8-chip.dtb /boot/sun5i-r8-chip.dtb

#Add a call to the startup script from etc/rc.local Add it before the exit 0
#	a) sh '/home/chip/WiRoc-StartupScripts/Startup.sh'


Install WiRoc-Monitor
	a) ? sudo apt-get install i2c-tools
	sudo wget -O /usr/local/bin/gpio.sh https://raw.githubusercontent.com/henla464/WiRoc-Monitor/master/gpio.sh
	sudo wget -O /usr/local/bin/blink.sh https://raw.githubusercontent.com/henla464/WiRoc-Monitor/master/blink.sh
        sudo chmod +x /usr/local/bin/blink.sh
        sudo wget -O /etc/systemd/system/blink.service https://raw.githubusercontent.com/henla464/WiRoc-Monitor/master/blink.service
        sudo wget -O /usr/local/etc/blink.cfg https://raw.githubusercontent.com/henla464/WiRoc-Monitor/master/blink.cfg
	sudo systemctl enable /etc/systemd/system/blink.service

Add user to dialout so it can access serialports without sudo
sudo usermod -a -G dialout $USER


--------
List devices
nmcli -m multiline -f device,type,state device status

List wifi networks
nmcli -m multiline -f ssid,signal,security device wifi list

Connect to wifi
sudo nmcli device wifi connect 'LasePrivate' password 'pw' ifname wlan0

sudo nmcli device disconnect wlan0

change mac
nmcli connection modify --temporary <connection_name> 802-11-wireless.cloned-mac-address 00:60:1B:EB:F8:73
nmcli connection up <connection_name>
--------

--------
Use UART on header
--------
Header U14, pin outs 1,3 and 5
First stop Getty to avoid most shell stdin/stdout to interfere with UART. Yes most, saddly kernel messages will still go though and there is currently no way to stop them (and they may happen from time to time after boot):

$ sudo systemctl stop serial-getty@ttyS0.service

You can then use UART as a standard serial port from /dev/ttyS0.
-------

------
Stop getty
  sudo kill -19 <pid>
------

-------
Gadget serial
-------
Stop kernel to write to it
sudo systemctl stop serial-getty@ttyGS0.service

-------

-------
Share your internet connection over usb
-------
http://askubuntu.com/questions/691986/network-manager-shared-connection-and-manual-settings-of-the-interface

//sudo apt-get install dnsmasq-base
// remove dnsmasq, it interfers with nm
//sudo apt-get remove dnsmasq
// create or edit the connection in nm, set it to shared
on the chip renew the IP lease: dhclient usb0 -v
-------

------
apt-get issue
------
https://bbs.nextthing.co/t/apt-get-update-fails-with-latest-image/11461/11

-------
log in with ssh
-------

Compile kernel
---------
http://www.chip-community.org/index.php/Compile_the_Linux_kernel_for_CHIP
http://askubuntu.com/questions/515407/how-recipe-to-build-only-one-kernel-module
http://unix.stackexchange.com/questions/60078/find-out-which-modules-are-associated-with-a-usb-device

https://github.com/xtacocorex/CHIP_IO
http://depado.markdownblog.com/2015-03-12-short-tutorial-raspbian-python3-4-rpi-gpio

http://wiki.emacinc.com/wiki/EMAC_OE_USB_Gadget_Connections


Remove file from history in github
----------------------------------
git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch WiRoc-Python-2.tar.gz' --prune-empty --tag-name-filter cat -- --all
git push origin --force --all

Download from github
--------------------
https://minhaskamal.github.io/DownGit/#/home
https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/henla464/WiRoc-Python-2

Bleno advertising interval in ms
--------------------------------
sudo BLENO_ADVERTISING_INTERVAL=500 node <your file>.js


---
sudo hciconfig hci0 reset

