openapi: "3.0.0"
info:
  description: "This is the WiRoc API"
  version: "1.0.0"
  title: "WiRoc"
  contact:
    email: "laselase@gmail.com"
servers:
  - url: /api
tags:
  - name: "Radio"
    description: "LORA Radio settings"
  - name: "SIRAP"
    description: "SIRAP tcp/ip settings"
  - name: "Status"
    description: ""
  - name: "Database"
    description: ""
  - name: "Public web server"
    description: ""
  - name: "SportIdent"
    description: ""
  - name: "Debug"
    description: ""
  - name: "Network"
    description: "Connect to Wifi and IP options"
paths:
  /channel/:
    get:
      tags:
      - "Radio"
      summary: "Get the channel used"
      operationId: "getChannel"
      responses:
        "200":
          description: "The channel used"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelObj"
  /channel/{channel}:
    get:
      tags:
      - "Radio"
      summary: "Set the channel"
      operationId: "setChannel"
      parameters:
        - name: channel
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Channel'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChannelObj"
  /lorarange/:
    get:
      tags:
      - "Radio"
      summary: "Get the Lora Range"
      operationId: "getLoraRange"
      responses:
        "200":
          description: "The range used"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoraRangeObj"
  /lorarange/{lorarange}:
    get:
      tags:
      - "Radio"
      summary: "Set the Lora Range"
      operationId: "setLoraRange"
      parameters:
        - name: lorarange
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/LoraRange'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoraRangeObj"
  /acknowledgementrequested/:
    get:
      tags:
      - "Radio"
      summary: "Get if acknowledgemnt should be requested when sending message over the LORA radio"
      operationId: "getAcknowledgementRequested"
      responses:
        "200":
          description: "0/1 depending on if acknowledgement should be requested"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /acknowledgementrequested/{ackreq}:
    get:
      tags:
      - "Radio"
      summary: "Set if acknowledgemnt should be requested when sending message over the lora radio"
      operationId: "setAcknowledgementRequested"
      parameters:
        - name: ackreq
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /power/:
    get:
      tags:
      - "Radio"
      summary: "Get lora radio power in dBm"
      operationId: "getPower"
      responses:
        "200":
          description: "The lora radio power in dBm"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PowerObj"
  /power/{power}:
    get:
      tags:
      - "Radio"
      summary: "Set the lora radio power in dBm"
      operationId: "setPower"
      parameters:
        - name: power
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Power'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PowerObj"
  /coderate/:
    get:
      tags:
      - "Radio"
      summary: "Get lora radio code rate"
      operationId: "getCodeRate"
      responses:
        "200":
          description: "The code rate"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeRateObj"
  /coderate/{coderate}:
    get:
      tags:
      - "Radio"
      summary: "Set the lora radio code rate"
      operationId: "setCodeRate"
      parameters:
        - name: coderate
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CodeRate'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeRateObj"
  /rxgainenabled/:
    get:
      tags:
      - "Radio"
      summary: "Get if RxGain is enabled"
      operationId: "GetRxGainEnabled"
      responses:
        "200":
          description: "0/1 depending on if RxGain is enabled or not"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /rxgainenabled/{rxgainenabled}:
    get:
      tags:
      - "Radio"
      summary: "Enable/Disable RxGain"
      operationId: "setRxGainEnabled"
      parameters:
        - name: rxgainenabled
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /sendtosirapenabled/:
    get:
      tags:
      - "SIRAP"
      summary: "Get if sending to SIRAP is enabled"
      operationId: "GetSendToSirapEnabled"
      responses:
        "200":
          description: "0/1 depending on if send to SIRAP is enabled or not"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /sendtosirapenabled/{sendtosirapenabled}:
    get:
      tags:
      - "SIRAP"
      summary: "Enable/Disable sending punches to SIRAP"
      operationId: "setSendToSirapEnabled"
      parameters:
        - name: sendtosirapenabled
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /sendtosirapip/:
    get:
      tags:
      - "SIRAP"
      summary: "Get the IP address that SIRAP messages are sent to"
      operationId: "getSendToSirapIP"
      responses:
        "200":
          description: "The IP address that SIRAP messages are sent to"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IPAddressObj"
  /sendtosirapip/{sendtosirapip}:
    get:
      tags:
      - "SIRAP"
      summary: "Set the IP address to send SIRAP messages to"
      operationId: "setSendToSirapIP"
      parameters:
        - name: sendtosirapip
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IPAddress'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IPAddressObj"
  /sendtosirapipport/:
    get:
      tags:
      - "SIRAP"
      summary: "Get the TCP/IP port that SIRAP messages are sent to"
      operationId: "getSendToSirapIPPort"
      responses:
        "200":
          description: "SIRAP TCP/IP Port"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyIntObj"
  /sendtosirapipport/{sendtosirapipport}:
    get:
      tags:
      - "SIRAP"
      summary: "Set the TCP/IP port to send SIRAP messages to"
      operationId: "setSendToSirapIPPort"
      parameters:
        - name: sendtosirapipport
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Property'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyIntObj"
  /status/:
    get:
      tags:
      - "Status"
      summary: "Get the status, with enabled input and output adapters and transformations"
      operationId: "getStatus"
      responses:
        "200":
          description: "JSON string with data about the inner status"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /settings/:
    get:
      tags:
      - "Status"
      summary: "Get all settings"
      operationId: "getSettings"
      responses:
        "200":
          description: "JSON with all settings"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /setting/{key}/{value}:
    get:
      tags:
      - "Status"
      summary: "Add or change a setting"
      operationId: "setSetting"
      parameters:
        - name: key
          description: "The settings key name"
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Property'
        - name: value
          description: "The settings value"
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Property'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /errorcodes/:
    get:
      tags:
      - "Status"
      summary: "Get the error codes"
      operationId: "getErrorCodes"
      responses:
        "200":
          description: "The error codes"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /wirocdevicename/:
    get:
      tags:
      - "Status"
      summary: "Get the device name"
      operationId: "getWiRocDeviceName"
      responses:
        "200":
          description: "The device name"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /wirocdevicename/{devicename}:
    get:
      tags:
      - "Status"
      summary: "Set the WiRoc device name"
      operationId: "setWiRocDeviceName"
      parameters:
        - name: devicename
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Property'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /loramode/:
    get:
      tags:
      - "Radio"
      summary: "Get the device name"
      operationId: "getLoraMode"
      responses:
        "200":
          description: "The lora mode (RECEIVER, REPEATER, SENDER)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /loramode/{loramode}:
    get:
      tags:
      - "Radio"
      summary: "Set the Lora mode (RECEIVER, REPEATER, SENDER)"
      operationId: "setLoraMode"
      parameters:
        - name: loramode
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Property'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /srr/enabled/:
    get:
      tags:
      - "SRR"
      summary: "Get if SRR receiver is enabled"
      operationId: "GetSRREnabled"
      responses:
        "200":
          description: "0/1 depending on if SRR receiver is enabled or not"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /srr/enabled/{enabled}:
    get:
      tags:
      - "SRR"
      summary: "Enable/Disable the SRR receiver"
      operationId: "setSRREnabled"
      parameters:
        - name: enabled
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /srr/mode:
    get:
      tags:
      - "SRR"
      summary: "Get the mode of the SRR radio"
      operationId: "getSRRMode"
      responses:
        "200":
          description: "The SRR mode (RECEIVE, SEND)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /srr/mode/{mode}:
    get:
      tags:
      - "SRR"
      summary: "Set the SRR mode (RECEIVE, SEND)"
      operationId: "setSRRMode"
      parameters:
        - name: srrmode
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Property'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /srr/redchannellistenonly/:
    get:
      tags:
      - "SRR"
      summary: "Get if SRR receiver is only listening without acknowledgeing messages on red channel"
      operationId: "getSRRRedChannelListenOnly"
      responses:
        "200":
          description: "0/1 depending on if SRR receiver is only listening or not"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /srr/redchannellistenonly/{enabled}:
    get:
      tags:
      - "SRR"
      summary: "Enable/Disable the SRR receiver listen only mode on red channel"
      operationId: "setSRRRedChannelListenOnly"
      parameters:
        - name: enabled
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /srr/bluechannellistenonly/:
    get:
      tags:
      - "SRR"
      summary: "Get if SRR receiver is only listening without acknowledgeing messages on blue channel"
      operationId: "getSRRBlueChannelListenOnly"
      responses:
        "200":
          description: "0/1 depending on if SRR receiver is only listening or not"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /srr/bluechannellistenonly/{enabled}:
    get:
      tags:
      - "SRR"
      summary: "Enable/Disable the SRR receiver listen only mode on blue channel"
      operationId: "setSRRBlueChannelListenOnly"
      parameters:
        - name: enabled
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /srr/redchannel/:
    get:
      tags:
      - "SRR"
      summary: "Get if the red channel of the SRR receiver is enabled"
      operationId: "GetSRRRedChannel"
      responses:
        "200":
          description: "0/1 depending on if SRR receiver is only listening or not"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /srr/redchannel/{enabled}:
    get:
      tags:
      - "SRR"
      summary: "Enable/Disable the red channel of the SRR receiver"
      operationId: "setSRRRedChannel"
      parameters:
        - name: enabled
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /srr/bluechannel/:
    get:
      tags:
      - "SRR"
      summary: "Get if the blue channel of the SRR receiver is enabled"
      operationId: "GetSRRBlueChannel"
      responses:
        "200":
          description: "0/1 depending on if SRR receiver is only listening or not"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /srr/bluechannel/{enabled}:
    get:
      tags:
      - "SRR"
      summary: "Enable/Disable the blue channel of the SRR receiver"
      operationId: "setSRRBlueChannel"
      parameters:
        - name: enabled
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /punches/:
    get:
      tags:
      - "Punches"
      summary: "Get new punches (sendtoblenoenabled must be enabled)"
      operationId: "getPunches"
      responses:
        "200":
          description: "JSON with the new punches"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /deletepunches/:
    get:
      tags:
      - "Punches"
      summary: "Delete all punches in the database"
      operationId: "deletePunches"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /dropalltables/:
    get:
      tags:
      - "Database"
      summary: "Drop and recreate all tables in the database"
      operationId: "dropalltables"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /testpunches/gettestpunches/{testbatchguid}/{includeall}/:
    get:
      tags:
      - "Punches"
      summary: "Get the test punches given the batch guid"
      operationId: "getTestPunches"
      parameters:
        - name: testbatchguid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Property'
        - name: includeall
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalseString'
      responses:
        "200":
          description: "JSON with test punches"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /testpunches/addtestpunch/{testbatchguid}/{sinumber}/:
    get:
      tags:
      - "Punches"
      summary: "Add a test punch to a test batch"
      operationId: "addTestPunch"
      parameters:
        - name: testbatchguid
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Property'
        - name: sinumber
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /ischarging/:
    get:
      tags:
      - "Status"
      summary: "Get if the device is charging now"
      operationId: "getIsCharging"
      responses:
        "200":
          description: "1 if it is charging, 0 otherwise"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /batterylevel/:
    get:
      tags:
      - "Status"
      summary: "Get the current battery level percentage"
      operationId: "getBatteryLevel"
      responses:
        "200":
          description: "Battery level in percentage"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /apikey/:
    get:
      tags:
      - "Public web server"
      summary: "Get the API key required for posting things to the internet server"
      operationId: "getApiKey"
      responses:
        "200":
          description: "The API key"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /webserverurl/:
    get:
      tags:
      - "Public web server"
      summary: "Get the web server url to the internet server"
      operationId: "getWebServerUrl"
      responses:
        "200":
          description: "The web server url"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /onewayreceive/:
    get:
      tags:
      - "SportIdent"
      summary: "Get if one-way recieve from USB SportIdent master station is enabled"
      operationId: "getOneWayReceive"
      responses:
        "200":
          description: "0/1 depending on if one-way recieve is enabled"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /onewayreceive/{onewayenabled}:
    get:
      tags:
      - "SportIdent"
      summary: "Enable/Disable one-way recieve from USB SportIdent master station"
      operationId: "setOneWayReceive"
      parameters:
        - name: onewayenabled
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /force4800baudrate/:
    get:
      tags:
      - "SportIdent"
      summary: "Get if baudrate 4800 kbps is enabled on USB port"
      operationId: "getForce4800BaudRate"
      responses:
        "200":
          description: "0/1 depending on if one-way recieve is enabled"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /force4800baudrate/{forceenabled}:
    get:
      tags:
      - "SportIdent"
      summary: "Enable/Disable baudrate 4800 kbps on USB port"
      operationId: "setForce4800BaudRate"
      parameters:
        - name: forceenabled
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /rs232mode/:
    get:
      tags:
      - "SportIdent"
      summary: "Get the mode of the RS232 port(s), SEND or RECEIVE"
      operationId: "getR232Mode"
      responses:
        "200":
          description: "The RS232 mode (SEND, RECEIVE)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /rs232mode/{rs232mode}:
    get:
      tags:
      - "SportIdent"
      summary: "Set the mode of the RS232 port(s), SEND or RECEIVE"
      operationId: "setRS232Mode"
      parameters:
        - name: rs232mode
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Property'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /rs232onewayreceive/:
    get:
      tags:
      - "SportIdent"
      summary: "Get if one-way recieve from SportIdent master station is enabled for the RS232 port(s)"
      operationId: "getRS232OneWayReceive"
      responses:
        "200":
          description: "0/1 depending on if one-way recieve is enabled"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /rs232onewayreceive/{onewayenabled}:
    get:
      tags:
      - "SportIdent"
      summary: "Enable/Disable one-way recieve from SportIdent master station for the RS232 port(s)"
      operationId: "setRS232OneWayReceive"
      parameters:
        - name: onewayenabled
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /forcers2324800baudrate/:
    get:
      tags:
      - "SportIdent"
      summary: "Get if 4800 baudrate is set on RS232 port"
      operationId: "getForceRS2324800BaudRate"
      responses:
        "200":
          description: "0/1 depending on if baudrate 4800 is set for RS232 serial ports"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /forcers2324800baudrate/{forceenabled}:
    get:
      tags:
      - "SportIdent"
      summary: "Enable/Disable baudrate 4800 kbps for RS232 serial ports"
      operationId: "setForceRS2324800BaudRateEnabled"
      parameters:
        - name: forceenabled
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /btserialonewayreceive/:
    get:
      tags:
      - "SportIdent"
      summary: "Get if one-way recieve from SportIdent master station is enabled for BT serial"
      operationId: "getBTSerialOneWayReceive"
      responses:
        "200":
          description: "0/1 depending on if one-way recieve is enabled on bt serial"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /btserialonewayreceive/{enabled}:
    get:
      tags:
      - "SportIdent"
      summary: "Enable/Disable one-way recieve from SportIdent master station for BT serial"
      operationId: "setBTSerialOneWayReceive"
      parameters:
        - name: enabled
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /forcebtserial4800baudrate/:
    get:
      tags:
      - "SportIdent"
      summary: "Get if 4800 baudrate is set for bt serial"
      operationId: "getForceBTSerial4800BaudRate"
      responses:
        "200":
          description: "0/1 depending on if baudrate 4800 is set for bt serial"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /forcebtserial4800baudrate/{enabled}:
    get:
      tags:
      - "SportIdent"
      summary: "Enable/Disable baudrate 4800 kbps for bt serial"
      operationId: "setForceBTSerial4800BaudRateEnabled"
      parameters:
        - name: enabled
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /sendtoblenoenabled/:
    get:
      tags:
      - "Punches"
      summary: "Is sending punches to webservice enabled"
      operationId: "getSendToBlenoEnabled"
      responses:
        "200":
          description: "0/1 depending on if sending punches to webservice is enabled"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /sendtoblenoenabled/{blenoenabled}:
    get:
      tags:
      - "Punches"
      summary: "Enable/Disable one-way recieve from SportIdent master station"
      operationId: "setSendToBlenoEnabled"
      parameters:
        - name: blenoenabled
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /logtoserver/:
    get:
      tags:
      - "Debug"
      summary: "Is logging to server enabled"
      operationId: "getLogToServer"
      responses:
        "200":
          description: "0/1 depending on if logging to server is enabled"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /logtoserver/{logtoserver}:
    get:
      tags:
      - "Debug"
      summary: "Enable/Disable logging to server"
      operationId: "setLogToServer"
      parameters:
        - name: logtoserver
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /loggingserverhost/:
    get:
      tags:
      - "Debug"
      summary: "Get the logging server host"
      operationId: "getLoggingServerHost"
      responses:
        "200":
          description: "The host"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /loggingserverhost/{host}:
    get:
      tags:
      - "Debug"
      summary: "Set the logging server host"
      operationId: "setLoggingServerHost"
      parameters:
        - name: host
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Property'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /loggingserverport/:
    get:
      tags:
      - "Debug"
      summary: "Get the TCP/IP port to send logging to"
      operationId: "getLoggingServerPort"
      responses:
        "200":
          description: "SIRAP TCP/IP Port"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyIntObj"
  /loggingserverport/{port}:
    get:
      tags:
      - "Debug"
      summary: "Set the TCP/IP port send logging to"
      operationId: "setLoggingServerPort"
      parameters:
        - name: port
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyIntObj"
  /wirocpythonversion/:
    get:
      tags:
      - "Status"
      summary: "Get the WiRoc Python version"
      operationId: "getWiRocPythonVersion"
      responses:
        "200":
          description: "The version"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /wirocbleversion/:
    get:
      tags:
      - "Status"
      summary: "Get the WiRoc BLE version"
      operationId: "getWiRocBLEVersion"
      responses:
        "200":
          description: "The version"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /wirocbleapiversion/:
    get:
      tags:
      - "Status"
      summary: "Get the WiRoc BLE API version"
      operationId: "getWiRocBLEAPIVersion"
      responses:
        "200":
          description: "The version"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /wirochwversion/:
    get:
      tags:
      - "Status"
      summary: "Get the WiRoc hardware version"
      operationId: "getWiRocHWVersion"
      responses:
        "200":
          description: "The version"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /scanbtaddresses/:
    get:
      tags:
      - "SportIdent"
      summary: "Gets a bluetooth devices"
      operationId: "getBTAddresses"
      responses:
        "200":
          description: "A list of bluetooth devices found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /bindrfcomm/{btAddress}/{btName}:
    get:
      tags:
      - "SportIdent"
      summary: "Bind a serial port to the bluetooth address"
      operationId: "bindRFComm"
      parameters:
        - name: btAddress
          in: path
          required: true
          schema:
            type: string
        - name: btName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /releaserfcomm/{portNumberUsed}:
    get:
      tags:
      - "SportIdent"
      summary: "Release a serial port from the bluetooth address"
      operationId: "releaseRFComm"
      parameters:
        - name: portNumberUsed
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/PropertyObj'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /ip/:
      get:
        tags:
        - "Network"
        summary: "Gets the current ip"
        operationId: "getIP2"
        responses:
          "200":
            description: "The current ip address"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/PropertyObj"
  /renewip/{ifaceNetType}:
    get:
      tags:
      - "Network"
      summary: "Renew the IP address"
      operationId: "renewIP"
      parameters:
        - name: ifaceNetType
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/PropertyObj'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /services/:
    get:
      tags:
      - "Status"
      summary: "Gets a list of services and their status"
      operationId: "getServices"
      responses:
        "200":
          description: "The list of services"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /listwifi/:
    get:
      tags:
      - "Network"
      summary: "Gets a list of available wifi networks"
      operationId: "getListWifi"
      responses:
        "200":
          description: "The list of available wifi networks"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /connectwifi/{wifiName}/{wifiPassword}:
    get:
      tags:
      - "Network"
      summary: "Connect to a wifi network"
      operationId: "connectWifi"
      parameters:
        - name: wifiName
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/PropertyObj'
        - name: wifiPassword
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/PropertyObj'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /disconnectwifi/:
    get:
      tags:
      - "Network"
      summary: "Disconnect from the wifi network"
      operationId: "disconnectWifi"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /rtc/datetime/:
    get:
      tags:
      - "RTC"
      summary: "Get the current time of the WiRoc device"
      operationId: "getRTCDateTime"
      responses:
        "200":
          description: "successful operation"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyObj"
  /rtc/datetime/{dateAndTimeWithSeconds}:
    get:
      tags:
      - "RTC"
      summary: "Set the current date and time of the WiRoc device"
      operationId: "setRTCDateTime"
      parameters:
        - name: dateAndTimeWithSeconds
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Property"
      responses:
        "200":
          description: "successful operation"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyObj"
  /rtc/wakeup/:
    get:
      tags:
      - "RTC"
      summary: "Gets the current wake up time set in the RTC chip"
      operationId: "getRTCWakeUp"
      responses:
        "200":
          description: "successful operation"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyObj"
  /rtc/wakeup/{time}:
    get:
      tags:
      - "RTC"
      summary: "Set the wake up time and the flag saying Wake Up should be be activated at shutdown"
      operationId: "setRTCWakeUp"
      parameters:
        - name: time
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/Property"
      responses:
        "200":
          description: "successful operation"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyObj"
  /rtc/clearwakeup/:
    get:
      tags:
      - "RTC"
      summary: "Clears the flag saying Wake Up should be be activated at shutdown"
      operationId: "clearRTCWakeUp"
      responses:
        "200":
          description: "successful operation"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyObj"
  /rtc/wakeupenabled/:
    get:
      tags:
      - "RTC"
      summary: "Gets whether Wake up is enabled to be activated at shutdown"
      operationId: "getWakeUpToBeEnabledAtShutdown"
      responses:
        "200":
          description: "successful operation"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrueFalseObj"
  /ham/callsign/:
    get:
      tags:
      - "HAM"
      summary: "Get the amateur radio / HAM callsign"
      operationId: "getHAMCallSign"
      responses:
        "200":
          description: "The callsign"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /ham/callsign/{callsign}:
    get:
      tags:
      - "HAM"
      summary: "Set the amateur radio / HAM callsign"
      operationId: "setHAMCallSign"
      parameters:
        - name: callsign
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Property'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /ham/enabled/:
    get:
      tags:
      - "HAM"
      summary: "Gets whether HAM is enabled or not"
      operationId: "getHAMEnabled"
      responses:
        "200":
          description: "successful operation"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrueFalseObj"
  /ham/enabled/{hamenabled}:
    get:
      tags:
      - "HAM"
      summary: "Enable/Disable HAM"
      operationId: "setHAMEnabled"
      parameters:
        - name: hamenabled
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/TrueFalse'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrueFalseObj"
  /uploadlogarchive/:
    get:
      tags:
      - "Debug"
      summary: "Upload log archive to webserver"
      operationId: "uploadLogArchive"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /startpatchap6212/:
    get:
      tags:
      - "Debug"
      summary: "Start patching the AP6212 chip"
      operationId: "startPatchAP6212"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /upgradewirocble/{version}:
    get:
      tags:
      - "Debug"
      summary: "Upgrade WiRoc BLE service"
      operationId: "upgradeWiRocBLE"
      parameters:
        - name: version
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/PropertyObj'
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
  /all/:
    get:
      tags:
      - "Status"
      summary: "Gets a semicolon separated list of settings"
      operationId: "getAllMainSettings"
      responses:
        "200":
          description: "The semicolon separated list of settings"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PropertyObj"
components:
  schemas:
    Channel:
      type: "string"
      description: "The channel as a string"
      enum:
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - "HAM1"
      - "HAM2"
      - "HAM3"
      - "HAM4"
      - "HAM5"
    ChannelObj:
      type: "object"
      properties:
        Value:
          $ref: '#/components/schemas/Channel'
        py/object:
          type: "string"
    LoraRange:
      type: "string"
      description: "The lora range as a string"
      enum:
      - "UL"
      - "XL"
      - "L"
      - "ML"
      - "MS"
      - "S"
    LoraRangeObj:
      type: "object"
      properties:
        Value:
          $ref: '#/components/schemas/LoraRange'
        py/object:
          type: "string"
    TrueFalseString:
      type: "string"
      description: "true or false as string"
      enum:
      - "true"
      - "false"
    TrueFalse:
      type: "string"
      description: "True or False as 0/1 string"
      enum:
      - "0"
      - "1"
    TrueFalseObj:
      type: "object"
      properties:
        Value:
          $ref: '#/components/schemas/TrueFalse'
        py/object:
          type: "string"
    Power:
      type: "string"
      description: "The lora power in dBm"
      enum:
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - "7"
      - "8"
      - "9"
      - "10"
      - "11"
      - "12"
      - "13"
      - "14"
      - "15"
      - "16"
      - "17"
      - "18"
      - "19"
      - "20"
      - "21"
      - "22"
    PowerObj:
      type: "object"
      properties:
        Value:
          $ref: '#/components/schemas/Power'
        py/object:
          type: "string"
    CodeRate:
      type: "string"
      description: "The code rate"
      enum:
      - "0"
      - "1"
      - "2"
      - "3"
    CodeRateObj:
      type: "object"
      properties:
        Value:
          $ref: '#/components/schemas/CodeRate'
        py/object:
          type: "string"
    IPAddress:
      type: "string"
      format: ipv4
    IPAddressObj:
      type: "object"
      properties:
        Value:
          $ref: '#/components/schemas/IPAddress'
        py/object:
          type: "string"
    Property:
      type: "string"
    PropertyObj:
      type: "object"
      properties:
        Value:
          $ref: '#/components/schemas/Property'
        py/object:
          type: "string"
    PropertyInt:
      type: "integer"
    PropertyIntObj:
      type: "object"
      properties:
        Value:
          $ref: '#/components/schemas/PropertyInt'
        py/object:
          type: "string"
