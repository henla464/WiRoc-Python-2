WiRoc
=====

- Add HAM frequencies, Probably should keep to fully within 433.7125 - 433,9625 to stay in the recommended Lora freqency band
	HAM1 - 433,7375
	HAM2 - 433,7875
	HAM3 - 433,8375 
	HAM4 - 433,8875
	HAM5 - 433,9375
	
	
- Should we change to not retry, or limit retries to configure SI-USB as two-way when it fails?
- Option to set SRR as output
- Send configurations to webbserver
- Send local ip address to webbserver ( add to devices )
- Add cardno etc to database for SRRMessages
- measure power consumption of  SRR receiver: arount 51 mA, 3.3V
    -- Sleep mode: maybe 50mA, very little difference if any
    -- Stop mode: 47mA so even then little difference...

implemented but not tested
- Send hwversion to webbserver, software versions


BLE?APP?
========
Double test messages sent

SRR code
========
- Power optimization
- measure resend intervals, is it same or does it increase or is it random.
- "Software flow control" setting for dongle (expert mode in SI Config), what does it do
- Test air+


-- Maybe (probably pretty complex, unsure how useful)
Add option to reconfigure remote wiroc

App
===

- Configure input / output for SRR



Done
----
x Getting releases from wiroc.se
x Enable/disable red/blue channel
x - Resubmit adapter that fetches failed messages from archive. Both Lora and Sirap (others?)
x set unique btaddress if required / save it in file system and in axp209 to keep it persistent
x add rtc_pcf8563 line to /etc/modules
x Turn off the old red status LED and use the yellow led on the nanopineo air board instead
x Send status with no of lora messages that hasn't been acked. In relay path no byte we can use 6 bits. Battery percent has 1 bit left
x Status send for remote wiroc units doesnt seem to work, doesn't turn green
x Install should build reed solomon library with cython
X Test max sending frequency without ack:  >~1.5 per second
X Test max sending frequency with ack > ~1.2 per second
X Add one-way option for connecting to samlingsboxar, srr dongles [WiRoc Python Done, app remaining]
X add RSSI to test punches
X Test RX Gain option (didn't see any difference in first test, but not sure if test was ok, RSSI is same. Dorji says enable can have small advantage)
x Add HW version file
x Add Settings file (for pesisting devicename, potentially other settings)
x The status light shouldn't blink when BLE fails, fail the service also?
x Patch the BLE fails, add delay to the redo when fails
x Make app work with old wiroc version
x Change to use 'single' BLE service to speed up connection
x Show repeater/sender/receiver somewhere
x RSSI value not saved in database
x SITEST doesn't set SI message kolumn values in messagebox
x when module returns something but it is not busy or ok it can be beginning of other message.
x When module returns 'busy' we should wait longer before retrying
x Add success should only be done when ack received for a matching message
x Add option to change ECC rate
x Change from bleno to use python/bluez, with option to connect to BT-serial
x Make it possible to select Lora mode
x Set Receive or Send for RS232, app + api + recievesi class + sendcomputer?
x Investigate if we need to release rfcomm if it is in closed state. Noticed when testing, but not sure how to replicate.
x -- https://unix.stackexchange.com/questions/352494/alternative-to-the-now-deprecated-rfcomm-binary-in-bluez
x -- https://stackoverflow.com/questions/62652901/how-do-i-broadcast-bluetooth-inquiry-with-python-sockets-af-bluetooth-socket
x Changed to use sockets from Python instead of serial ports and RFCOMM to connect to Bluetooth serial devices
x Change how RS232 input works to avoid it from trying to init every 10s. Maybe always open read only. And when first message arrive reconfigure/reinit with two-way if that is selected.
x Make subclasses for receivesiadapter with each type (USB, RS232, Bluetooth)
x Set autosend automatically if not set when initializing
x In lora SendData function, if OK is not returned then read all data and add to LoraRadioDataHandler, look for OK at the end, accept it and remove it. Set a variable to allow GetRadioData to fetch the message (see row 6266 for example: Documents/WiRoc/Competitions/FÃ¤nestad20220409/LogArchive_D4\:12\:43\:24\:70\:F5_2022-04-09-14\:39\:49/home/chip/WiRoc-Python-2/WiRoc.log.2)
x pass msgSubBatch to the callbacks, set same datetime as sent date for all messages in a batch
x Save last messageid sent, when ack arrive and message is corrupted and cant be recovered then compare and still allow it if the message id is correct
x Remove only message fetched from datareceived, clear all only when no message was successfully fetched
x Send first test punch directly, dont wait one interval
x Fix send test punches interval for CHIP (seem to not use the selected interval)
x Make update work for CHIP also
x When getting alternative punch messages and guessing TH, take datarate/coderate into account.
x Detect SportIdent SRR usb stick, and open it in one-way mode
x Make GetReDCoSCombinationThreshold adjust to message datarate / coderate

possible HW enhancments
-----------------------


Done
x Add RS232 conversion on board
x Add SRR receiver module/modules
x RTC (realtime clock)
x Reroute SDA, SCK to the display
x RS232 Serialport (use TTL->RS232 converter embedded in R232Connector)
x  -- Need to move GPIOA0-GPIO3 pins to GPIOC0-3 (GPIOA0 = TX, GPIOA1 = RX)
x Make the PCB the size and shape of the box
x Move the Rx and Tx LEDs together, use different colors. 
   -- Removed the status led and moved Rx and Tx apart instead
x Test resistor in series with button to see if we can get it not triggering under water
x     -- Gummiknappen ~50kohm
x     -- vitknapp ~30+kohm
x     -- svartknapp ~35kohm
x -> 51 kOhm fungerar (51+35kohm - 86 fungerar inte)
x -> 31 kOhm fungerar (31+35kohm - 66 fungerar inte)
x -> 26 kOhm fungerar (26+35kohm - 61 fungerar inte)
x ===> Seem to only be a problem when the antennaconnector is under water too, so shouldnt be an issue in real life. 
x      Even though, change the resistor  from 1K to 24Kohm

Ack could include request to resend missed messages. Good idea? Or just a resend adapter fetching from failed messages?



- BT address 6 bytes: REG 04-0FH: Data Cache
 hciconfig hci0 down
 sudo btmgmt public-addr B0:02:47:00:D7:6D
 hciconfig hci0 up
In startup script check AXP209 for bt address, then check settings.yaml and actual bt address.
 If AXP209 has address then use it and put it in settings
 If AXP209 is empty but settings.yaml has then write it to AXP209 and use it
 If both AXP209 and settings.yaml is empty then use the actual bt address and write it settings and axp209
 BUT if ForceBTAddress: true in settings.yaml then use that bt address and write it to AP209
