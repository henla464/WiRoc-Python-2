WiRoc
=====
Change how RS232 input works to avoid it from trying to init every 10s. Maybe always open read only. And when first message arrive reconfigure/reinit with two-way if that is selected.
Make subclasses for receivesiadapter with each type (USB, RS232, Bluetooth)
Test using python/bluez instead of bleno also for CHIP version
Investigate if we need to release rfcomm if it is in closed state. Noticed when testing, but not sure how to replicate.

-- Maybe (probably pretty complex, unsure how useful)
Add option to reconfigure remote wiroc

App
===
- Getting releases from github has a low limit of calls per hour, need to find another solution. Maybe get from monitor.wiroc.se api instead.
  Maybe have it cache the result and only refresh infrequently or if "forced"


Done
----

X Test max sending frequency without ack:  >~1.5 per second
X Test max sending frequency with ack > ~1.2 per second
X Add one-way option for connecting to samlingsboxar, srr dongles [WiRoc Python Done, app remaining]
X add RSSI to test punches
X Test RX Gain option (didn't see any difference in first test, but not sure if test was ok, RSSI is same. Dorji says enable can have small advantage)
x Add HW version file
x Add Settings file (for pesisting devicename, potentially other settings)
x The status light shouldn't blink when BLE fails, fail the service also?
x Patch the BLE fails, add delay to the redo when fails
x Make app work with old wiroc version
x Change to use 'single' BLE service to speed up connection
x Show repeater/sender/receiver somewhere
x RSSI value not saved in database
x SITEST doesn't set SI message kolumn values in messagebox
x when module returns something but it is not busy or ok it can be beginning of other message.
x When module returns 'busy' we should wait longer before retrying
x Add success should only be done when ack received for a matching message
x Add option to change ECC rate
x Change from bleno to use python/bluez, with option to connect to BT-serial
x Make it possible to select Lora mode
x Set Receive or Send for RS232, app + api + recievesi class + sendcomputer?

possible HW enhancments
-----------------------
RTC (realtime clock)
Add RS232 conversion on board


Done
x Reroute SDA, SCK to the display
x RS232 Serialport (use TTL->RS232 converter embedded in R232Connector)
x  -- Need to move GPIOA0-GPIO3 pins to GPIOC0-3 (GPIOA0 = TX, GPIOA1 = RX)
x Make the PCB the size and shape of the box
x Move the Rx and Tx LEDs together, use different colors. 
   -- Removed the status led and moved Rx and Tx apart instead
x Test resistor in series with button to see if we can get it not triggering under water
x     -- Gummiknappen ~50kohm
x     -- vitknapp ~30+kohm
x     -- svartknapp ~35kohm
x -> 51 kOhm fungerar (51+35kohm - 86 fungerar inte)
x -> 31 kOhm fungerar (31+35kohm - 66 fungerar inte)
x -> 26 kOhm fungerar (26+35kohm - 61 fungerar inte)
x ===> Seem to only be a problem when the antennaconnector is under water too, so shouldnt be an issue in real life. 
x      Even though, change the resistor  from 1K to 24Kohm

IDs
----
Options for IDs
Logical MessageID: cardno, time (and stationo) [4 bytes + 4 bytes] (all included in serialmessage)
other option?: MemoryAddress 2 bytes, WiRoc-serialno 2 bytes (=>could be same memoryaddress from different SI masters)
other option?: WiRoc-serialno + messageid in database 2+2 bytes (=> adds 3 bytes to message)


Ack could include request to resend missed messages. Good idea? Or just a resend adapter fetching from failed messages?
